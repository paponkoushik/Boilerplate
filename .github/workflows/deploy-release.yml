name: Deploy to RELEASE

on:
  push:
    branches:
      - release

jobs:
  Deployment:
    name: Deploy Action
    runs-on: ubuntu-latest
    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      - uses: actions/checkout@v2.1.0
        with:
          fetch-depth: 2
          ref: release

      - name: Create .env file üìå
        run: |
          php -r "file_exists('.env') || copy('.env.ci', '.env');"
          sed -i "/APP_URL/c APP_URL=https://readykit.gainhq.com" .env
          sed -i "/DB_DATABASE/c DB_DATABASE=${{ secrets.RELEASE_DB_DATABASE }}" .env
          sed -i "/DB_USERNAME/c DB_USERNAME=${{ secrets.RELEASE_DB_USERNAME }}" .env
          sed -i "/DB_PASSWORD/c DB_PASSWORD=${{ secrets.RELEASE_DB_PASSWORD }}" .env
          sed -i "/DEPLOYMENT_KEY/c DEPLOYMENT_KEY=${{ secrets.RELEASE_DEPLOYMENT_KEY }}" .env
          sed -i "/PREPARE_RELEASE_FILES/c PREPARE_RELEASE_FILES=false" .env
          echo "!.env" > .git-ftp-include

      - name: Cache Composer dependencies üóë
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache/files
          key: dependencies-composer-${{ hashFiles('composer.json') }}

      - name: Install Composer dependencies ü§û
        run: |
          rm composer.lock
          composer install

      - name: Generate Application Key üîë
        run: php artisan key:generate

      - name: Cache Yarn
        id: yarn-cache
        uses: actions/cache@v2.1.3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn Install
        run: yarn install

      - name: Building Assets
        run: yarn prod

      - name: Archiving Repository ü§ê
        run: zip -r $GITHUB_RUN_ID.zip ./ -x ".git/*" -x ".github/*" -x "node_modules/*"

      - name: Remove Files except archive üßπ
        run: |
          shopt -s extglob
          rm -rf !("$GITHUB_RUN_ID.zip")
          find -path './.*' -delete
          echo "!$GITHUB_RUN_ID.zip" >> .git-ftp-include

      - name: Create unzipper script üîè
        run: |
          echo "<?php
              \$key = trim(\$_REQUEST['key']);
              if (!\$key) {
                die('Key is not valid!');
              }

              if(\$key != '${{ secrets.RELEASE_DEPLOYMENT_KEY }}') {
                die('Deployment key not matched!');
              }

              \$dir = \"./\";
              \$di = new RecursiveDirectoryIterator(\$dir, FilesystemIterator::SKIP_DOTS);
              \$ri = new RecursiveIteratorIterator(\$di, RecursiveIteratorIterator::CHILD_FIRST);
              foreach ( \$ri as \$file ) {
              \$allowed = [\"$GITHUB_RUN_ID.zip\", \"$GITHUB_RUN_ID.php\"];
                if(!in_array(\$file->getBasename(), \$allowed)) {
                  \$file->isDir() ?  rmdir(\$file) : unlink(\$file);
                }
              }

              \$zip = new ZipArchive;
              if (\$zip->open(\"$GITHUB_RUN_ID.zip\") === TRUE) {
                \$zip->extractTo('./');
                \$zip->close();
                echo \"$GITHUB_RUN_ID.zip extracted üçª \r\n \";
                if(unlink(\"$GITHUB_RUN_ID.zip\")) {
                  echo \"$GITHUB_RUN_ID.zip deleted üç¶ \r\n \";
                }
                if(unlink(\"$GITHUB_RUN_ID.php\")) {
                  echo \"$GITHUB_RUN_ID.php deleted itself! ü§è \r\n \";
                }
              }
              else {
                echo 'failed!';
              }
          ?>" > $GITHUB_RUN_ID.php
          echo "!$GITHUB_RUN_ID.php" >> .git-ftp-include

      - name: Adding untracked files üôå
        run: |
          git init
          git add .
          git config --global user.name "koushikbalo"
          git config --global user.email "koushik@gain.media"
          git commit -m 'Commit From Deploy!'

      - name: FTP Deploy üí∏
        uses: SamKirkland/FTP-Deploy-Action@3.1.1
        with:
          ftp-server: ftp://${{ secrets.RELEASE_FTP_SERVER }}
          ftp-username: ${{ secrets.RELEASE_FTP_USERNAME }}
          ftp-password: ${{ secrets.RELEASE_FTP_PASSWORD }}


      - name: Extract deployed files ü••
        uses: wei/curl@master
        with:
          args: https://readykit.gainhq.com/original/$GITHUB_RUN_ID.php?key=${{ secrets.RELEASE_DEPLOYMENT_KEY }}

      - name: Move deployed files üçª
        uses: wei/curl@master
        with:
          args: https://readykit.gainhq.com/original/deploy.php?key=${{ secrets.RELEASE_DEPLOYMENT_KEY }}

  Notify-Slack:
    if: ${{ always() }}
    needs: [ Deployment ]
    runs-on: ubuntu-latest
    steps:
      - uses: ahmadnassri/action-slack-workflow-notifications@v1
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          ignore-jobs: Notify-Slack
